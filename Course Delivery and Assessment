// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/math/SafeMath.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

contract CourseDelivery is Ownable {
    using SafeMath for uint256;

    IERC20 public maartionToken;

    struct Course {
        uint256 id;
        string name;
        string description;
        address[] students;
        mapping(address => bool) enrolled;
        mapping(uint256 => string) materials;
        uint256 materialsCount;
        mapping(uint256 => Quiz) quizzes;
        uint256 quizzesCount;
    }

    struct Quiz {
        string question;
        string[] options;
        uint256 correctOption;
        mapping(address => bool) completed;
        mapping(address => bool) correct;
    }

    uint256 public nextCourseId;
    mapping(uint256 => Course) public courses;

    event CourseCreated(uint256 courseId, string name, string description);
    event StudentEnrolled(uint256 courseId, address student);
    event MaterialAdded(uint256 courseId, uint256 materialId, string content);
    event QuizAdded(uint256 courseId, uint256 quizId, string question);
    event QuizCompleted(uint256 courseId, uint256 quizId, address student, bool success);

    constructor(address _maartionToken) {
        maartionToken = IERC20(_maartionToken);
    }

    modifier onlyEnrolled(uint256 _courseId) {
        require(courses[_courseId].enrolled[msg.sender], "You are not enrolled in this course");
        _;
    }

    function createCourse(string memory _name, string memory _description) public onlyOwner {
        uint256 courseId = nextCourseId;
        Course storage course = courses[courseId];
        course.id = courseId;
        course.name = _name;
        course.description = _description;
        course.materialsCount = 0;
        course.quizzesCount = 0;

        emit CourseCreated(courseId, _name, _description);

        nextCourseId++;
    }

    function enrollStudent(uint256 _courseId) public {
        require(!courses[_courseId].enrolled[msg.sender], "You are already enrolled in this course");
        courses[_courseId].students.push(msg.sender);
        courses[_courseId].enrolled[msg.sender] = true;

        emit StudentEnrolled(_courseId, msg.sender);
    }

    function addMaterial(uint256 _courseId, string memory _content) public onlyOwner {
        uint256 materialId = courses[_courseId].materialsCount;
        courses[_courseId].materials[materialId] = _content;
        courses[_courseId].materialsCount++;

        emit MaterialAdded(_courseId, materialId, _content);
    }

    function addQuiz(uint256 _courseId, string memory _question, string[] memory _options, uint256 _correctOption) public onlyOwner {
        uint256 quizId = courses[_courseId].quizzesCount;
        Quiz storage quiz = courses[_courseId].quizzes[quizId];
        quiz.question = _question;
        quiz.options = _options;
        quiz.correctOption = _correctOption;

        courses[_courseId].quizzesCount++;

        emit QuizAdded(_courseId, quizId, _question);
    }

    function completeQuiz(uint256 _courseId, uint256 _quizId, uint256 _selectedOption) public onlyEnrolled(_courseId) {
        Quiz storage quiz = courses[_courseId].quizzes[_quizId];
        require(!quiz.completed[msg.sender], "You have already completed this quiz");

        quiz.completed[msg.sender] = true;
        if (_selectedOption == quiz.correctOption) {
            quiz.correct[msg.sender] = true;
            emit QuizCompleted(_courseId, _quizId, msg.sender, true);
        } else {
            emit QuizCompleted(_courseId, _quizId, msg.sender, false);
        }
    }

    function getCourseDetails(uint256 _courseId) public view returns (string memory name, string memory description, uint256 materialsCount, uint256 quizzesCount) {
        Course storage course = courses[_courseId];
        return (course.name, course.description, course.materialsCount, course.quizzesCount);
    }

    function getMaterial(uint256 _courseId, uint256 _materialId) public view onlyEnrolled(_courseId) returns (string memory content) {
        return courses[_courseId].materials[_materialId];
    }

    function getQuiz(uint256 _courseId, uint256 _quizId) public view onlyEnrolled(_courseId) returns (string memory question, string[] memory options) {
        Quiz storage quiz = courses[_courseId].quizzes[_quizId];
        return (quiz.question, quiz.options);
    }

    function hasCompletedQuiz(uint256 _courseId, uint256 _quizId) public view returns (bool) {
        return courses[_courseId].quizzes[_quizId].completed[msg.sender];
    }

    function isQuizCorrect(uint256 _courseId, uint256 _quizId) public view returns (bool) {
        return courses[_courseId].quizzes[_quizId].correct[msg.sender];
    }
}
